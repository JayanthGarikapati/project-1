{"cells":[{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"2AxokRAvniRO","outputId":"a2ed1af0-8eac-4a21-a666-e255b688b34b"},"outputs":[{"name":"stdout","output_type":"stream","text":["Mounted at /content/gdrive\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/gdrive')"]},{"cell_type":"code","source":["import numpy as np # linear algebra\n","import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","# Input data files are available in the \"../input/\" directory.\n","# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n","\n","import os\n","print(os.listdir(\"/content/drive/MyDrive/images\"))\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"kmr03nhmxXTd","executionInfo":{"status":"ok","timestamp":1697448504406,"user_tz":-330,"elapsed":493,"user":{"displayName":"GARI KAPATI MUNI JAYANTH G","userId":"17943767192181774217"}},"outputId":"2bdf495e-9939-4641-9d33-05a35111a71f"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["['000028.jpg', '000022.jpg', '000009.jpg', '000011.jpg', '000001.jpg', '000010.jpg', '000007.jpg', '000029.jpg', '000002.jpg', '000021.jpg', '000008.jpg', '000031.jpg', '000005.jpg', '000020.jpg', '000006.jpg', '000004.jpg', '000024.jpg', '000026.jpg', '000033.jpg', '000023.jpg', '000035.jpg', '000018.jpg', '000034.jpg', '000025.jpg', '000003.jpg', '000019.jpg', '000032.jpg', '000014.jpg', '000013.jpg', '000017.jpg', '000016.jpg', '000027.jpg', '000012.jpg', '000015.jpg', '000066.jpg', '000065.jpg', '000070.jpg', '000060.jpg', '000041.jpg', '000037.jpg', '000049.jpg', '000053.jpg', '000047.jpg', '000048.jpg', '000038.jpg', '000068.jpg', '000064.jpg', '000055.jpg', '000045.jpg', '000039.jpg', '000051.jpg', '000046.jpg', '000058.jpg', '000059.jpg', '000044.jpg', '000061.jpg', '000050.jpg', '000042.jpg', '000057.jpg', '000036.jpg', '000071.jpg', '000062.jpg', '000069.jpg', '000056.jpg', '000063.jpg', '000052.jpg', '000043.jpg', '000067.jpg', '000040.jpg', '000054.jpg', '000093.jpg', '000084.jpg', '000095.jpg', '000072.jpg', '000075.jpg', '000080.jpg', '000087.jpg', '000090.jpg', '000081.jpg', '000092.jpg', '000088.jpg', '000082.jpg', '000079.jpg', '000094.jpg', '000078.jpg', '000086.jpg', '000083.jpg', '000073.jpg', '000077.jpg', '000085.jpg', '000076.jpg', '000074.jpg', '000089.jpg', '000096.jpg', '000091.jpg', '049412.jpg', '049414.jpg', '049413.jpg', '049416.jpg', '049415.jpg', '202452.jpg', '202454.jpg', '202474.jpg', '202470.jpg', '202473.jpg', '202472.jpg', '202465.jpg', '202463.jpg', '202464.jpg', '202475.jpg', '202457.jpg', '202476.jpg', '202468.jpg', '202460.jpg', '202481.jpg', '202477.jpg', '202456.jpg', '202453.jpg', '202469.jpg', '202471.jpg', '202466.jpg', '202482.jpg', '202483.jpg', '202480.jpg', '202479.jpg', '202455.jpg', '202461.jpg', '202478.jpg', '202467.jpg', '202458.jpg', '202462.jpg', '202459.jpg', '202514.jpg', '202499.jpg', '202507.jpg', '202526.jpg', '202516.jpg', '202512.jpg', '202532.jpg', '202511.jpg', '202506.jpg', '202517.jpg', '202536.jpg', '202529.jpg', '202493.jpg', '202531.jpg', '202500.jpg', '202497.jpg', '202505.jpg', '202521.jpg', '202503.jpg', '202520.jpg', '202513.jpg', '202534.jpg', '202525.jpg', '202510.jpg', '202498.jpg', '202495.jpg', '202515.jpg', '202522.jpg', '202530.jpg', '202533.jpg', '202494.jpg', '202527.jpg', '202496.jpg', '202501.jpg', '202535.jpg', '202509.jpg', '202518.jpg', '202528.jpg', '202504.jpg', '202523.jpg', '202508.jpg', '202524.jpg', '202502.jpg', '202519.jpg', '202577.jpg', '202560.jpg', '202567.jpg', '202551.jpg', '202541.jpg', '202547.jpg', '202552.jpg', '202556.jpg', '202566.jpg', '202543.jpg', '202575.jpg', '202570.jpg', '202557.jpg', '202565.jpg', '202578.jpg', '202569.jpg', '202564.jpg', '202553.jpg', '202574.jpg', '202544.jpg', '202540.jpg', '202562.jpg', '202576.jpg', '202537.jpg', '202550.jpg', '202573.jpg', '202542.jpg', '202563.jpg', '202571.jpg', '202555.jpg', '202558.jpg', '202554.jpg', '202548.jpg', '202549.jpg', '202561.jpg', '202568.jpg', '202546.jpg', '202538.jpg', '202545.jpg', '202559.jpg', '202539.jpg', '202572.jpg', '202597.jpg', '202593.jpg', '202579.jpg', '202583.jpg', '202581.jpg', '202592.jpg', '202594.jpg', '202585.jpg', '202580.jpg', '202586.jpg', '202591.jpg', '202589.jpg', '202584.jpg', '202582.jpg', 'list_eval_partition.csv', '202590.jpg', '202587.jpg', '202595.jpg', '202598.jpg', 'list_landmarks_align_celeba.csv', '202599.jpg', '202596.jpg', '202588.jpg', 'list_attr_celeba.csv', '.ipynb_checkpoints', 'list_bbox_celeba.csv']\n"]}]},{"cell_type":"code","source":["data = pd.read_csv(\"/content/drive/MyDrive/list_attr_celeba.csv\")"],"metadata":{"id":"KKI8XWq0xk82"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# We have a quick look into the data\n","data.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":255},"id":"BLRyeeDZxvOL","executionInfo":{"status":"ok","timestamp":1697448063533,"user_tz":-330,"elapsed":626,"user":{"displayName":"GARI KAPATI MUNI JAYANTH G","userId":"17943767192181774217"}},"outputId":"e0c6cb97-3f34-4433-f053-a9a3327d4caf"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["     image_id  5_o_Clock_Shadow  Arched_Eyebrows  Attractive  Bags_Under_Eyes  \\\n","0  000001.jpg                -1                1           1               -1   \n","1  000002.jpg                -1               -1          -1                1   \n","2  000003.jpg                -1               -1          -1               -1   \n","3  000004.jpg                -1               -1           1               -1   \n","4  000005.jpg                -1                1           1               -1   \n","\n","   Bald  Bangs  Big_Lips  Big_Nose  Black_Hair  ...  Sideburns  Smiling  \\\n","0    -1     -1        -1        -1          -1  ...         -1        1   \n","1    -1     -1        -1         1          -1  ...         -1        1   \n","2    -1     -1         1        -1          -1  ...         -1       -1   \n","3    -1     -1        -1        -1          -1  ...         -1       -1   \n","4    -1     -1         1        -1          -1  ...         -1       -1   \n","\n","   Straight_Hair  Wavy_Hair  Wearing_Earrings  Wearing_Hat  Wearing_Lipstick  \\\n","0              1         -1                 1           -1                 1   \n","1             -1         -1                -1           -1                -1   \n","2             -1          1                -1           -1                -1   \n","3              1         -1                 1           -1                 1   \n","4             -1         -1                -1           -1                 1   \n","\n","   Wearing_Necklace  Wearing_Necktie  Young  \n","0                -1               -1      1  \n","1                -1               -1      1  \n","2                -1               -1      1  \n","3                 1               -1      1  \n","4                -1               -1      1  \n","\n","[5 rows x 41 columns]"],"text/html":["\n","  <div id=\"df-74882f8e-fb54-4e3b-950d-bff061aad147\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>image_id</th>\n","      <th>5_o_Clock_Shadow</th>\n","      <th>Arched_Eyebrows</th>\n","      <th>Attractive</th>\n","      <th>Bags_Under_Eyes</th>\n","      <th>Bald</th>\n","      <th>Bangs</th>\n","      <th>Big_Lips</th>\n","      <th>Big_Nose</th>\n","      <th>Black_Hair</th>\n","      <th>...</th>\n","      <th>Sideburns</th>\n","      <th>Smiling</th>\n","      <th>Straight_Hair</th>\n","      <th>Wavy_Hair</th>\n","      <th>Wearing_Earrings</th>\n","      <th>Wearing_Hat</th>\n","      <th>Wearing_Lipstick</th>\n","      <th>Wearing_Necklace</th>\n","      <th>Wearing_Necktie</th>\n","      <th>Young</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>000001.jpg</td>\n","      <td>-1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>-1</td>\n","      <td>-1</td>\n","      <td>-1</td>\n","      <td>-1</td>\n","      <td>-1</td>\n","      <td>-1</td>\n","      <td>...</td>\n","      <td>-1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>-1</td>\n","      <td>1</td>\n","      <td>-1</td>\n","      <td>1</td>\n","      <td>-1</td>\n","      <td>-1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>000002.jpg</td>\n","      <td>-1</td>\n","      <td>-1</td>\n","      <td>-1</td>\n","      <td>1</td>\n","      <td>-1</td>\n","      <td>-1</td>\n","      <td>-1</td>\n","      <td>1</td>\n","      <td>-1</td>\n","      <td>...</td>\n","      <td>-1</td>\n","      <td>1</td>\n","      <td>-1</td>\n","      <td>-1</td>\n","      <td>-1</td>\n","      <td>-1</td>\n","      <td>-1</td>\n","      <td>-1</td>\n","      <td>-1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>000003.jpg</td>\n","      <td>-1</td>\n","      <td>-1</td>\n","      <td>-1</td>\n","      <td>-1</td>\n","      <td>-1</td>\n","      <td>-1</td>\n","      <td>1</td>\n","      <td>-1</td>\n","      <td>-1</td>\n","      <td>...</td>\n","      <td>-1</td>\n","      <td>-1</td>\n","      <td>-1</td>\n","      <td>1</td>\n","      <td>-1</td>\n","      <td>-1</td>\n","      <td>-1</td>\n","      <td>-1</td>\n","      <td>-1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>000004.jpg</td>\n","      <td>-1</td>\n","      <td>-1</td>\n","      <td>1</td>\n","      <td>-1</td>\n","      <td>-1</td>\n","      <td>-1</td>\n","      <td>-1</td>\n","      <td>-1</td>\n","      <td>-1</td>\n","      <td>...</td>\n","      <td>-1</td>\n","      <td>-1</td>\n","      <td>1</td>\n","      <td>-1</td>\n","      <td>1</td>\n","      <td>-1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>-1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>000005.jpg</td>\n","      <td>-1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>-1</td>\n","      <td>-1</td>\n","      <td>-1</td>\n","      <td>1</td>\n","      <td>-1</td>\n","      <td>-1</td>\n","      <td>...</td>\n","      <td>-1</td>\n","      <td>-1</td>\n","      <td>-1</td>\n","      <td>-1</td>\n","      <td>-1</td>\n","      <td>-1</td>\n","      <td>1</td>\n","      <td>-1</td>\n","      <td>-1</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows × 41 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-74882f8e-fb54-4e3b-950d-bff061aad147')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-74882f8e-fb54-4e3b-950d-bff061aad147 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-74882f8e-fb54-4e3b-950d-bff061aad147');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-c1a9efa8-9828-43f2-adc8-85c70232a4d8\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-c1a9efa8-9828-43f2-adc8-85c70232a4d8')\"\n","            title=\"Suggest charts.\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-c1a9efa8-9828-43f2-adc8-85c70232a4d8 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":42}]},{"cell_type":"code","source":["data.info()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"DRI0nb1XxzLb","executionInfo":{"status":"ok","timestamp":1697448067470,"user_tz":-330,"elapsed":423,"user":{"displayName":"GARI KAPATI MUNI JAYANTH G","userId":"17943767192181774217"}},"outputId":"5673d505-97d8-4d3e-cb03-d3c45d45d8f4"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 202599 entries, 0 to 202598\n","Data columns (total 41 columns):\n"," #   Column               Non-Null Count   Dtype \n","---  ------               --------------   ----- \n"," 0   image_id             202599 non-null  object\n"," 1   5_o_Clock_Shadow     202599 non-null  int64 \n"," 2   Arched_Eyebrows      202599 non-null  int64 \n"," 3   Attractive           202599 non-null  int64 \n"," 4   Bags_Under_Eyes      202599 non-null  int64 \n"," 5   Bald                 202599 non-null  int64 \n"," 6   Bangs                202599 non-null  int64 \n"," 7   Big_Lips             202599 non-null  int64 \n"," 8   Big_Nose             202599 non-null  int64 \n"," 9   Black_Hair           202599 non-null  int64 \n"," 10  Blond_Hair           202599 non-null  int64 \n"," 11  Blurry               202599 non-null  int64 \n"," 12  Brown_Hair           202599 non-null  int64 \n"," 13  Bushy_Eyebrows       202599 non-null  int64 \n"," 14  Chubby               202599 non-null  int64 \n"," 15  Double_Chin          202599 non-null  int64 \n"," 16  Eyeglasses           202599 non-null  int64 \n"," 17  Goatee               202599 non-null  int64 \n"," 18  Gray_Hair            202599 non-null  int64 \n"," 19  Heavy_Makeup         202599 non-null  int64 \n"," 20  High_Cheekbones      202599 non-null  int64 \n"," 21  Male                 202599 non-null  int64 \n"," 22  Mouth_Slightly_Open  202599 non-null  int64 \n"," 23  Mustache             202599 non-null  int64 \n"," 24  Narrow_Eyes          202599 non-null  int64 \n"," 25  No_Beard             202599 non-null  int64 \n"," 26  Oval_Face            202599 non-null  int64 \n"," 27  Pale_Skin            202599 non-null  int64 \n"," 28  Pointy_Nose          202599 non-null  int64 \n"," 29  Receding_Hairline    202599 non-null  int64 \n"," 30  Rosy_Cheeks          202599 non-null  int64 \n"," 31  Sideburns            202599 non-null  int64 \n"," 32  Smiling              202599 non-null  int64 \n"," 33  Straight_Hair        202599 non-null  int64 \n"," 34  Wavy_Hair            202599 non-null  int64 \n"," 35  Wearing_Earrings     202599 non-null  int64 \n"," 36  Wearing_Hat          202599 non-null  int64 \n"," 37  Wearing_Lipstick     202599 non-null  int64 \n"," 38  Wearing_Necklace     202599 non-null  int64 \n"," 39  Wearing_Necktie      202599 non-null  int64 \n"," 40  Young                202599 non-null  int64 \n","dtypes: int64(40), object(1)\n","memory usage: 63.4+ MB\n"]}]},{"cell_type":"code","source":["data.drop([\"image_id\"],axis=1,inplace = True)"],"metadata":{"id":"BVC7ocX0yywG"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["y = data.Young.values\n","# we drop Young feature from data set and assign it as x_data\n","x_data = data.drop([\"Young\"],axis=1)"],"metadata":{"id":"RBN1fFtLy6zA"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["x = (x_data - np.min(x_data))/(np.max(x_data)-np.min(x_data)).values"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ppPoJv9Gy8Uz","executionInfo":{"status":"ok","timestamp":1697448200912,"user_tz":-330,"elapsed":1062,"user":{"displayName":"GARI KAPATI MUNI JAYANTH G","userId":"17943767192181774217"}},"outputId":"0fa509d7-68d1-4e18-b8d3-48e5809d2666"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/numpy/core/fromnumeric.py:84: FutureWarning: In a future version, DataFrame.min(axis=None) will return a scalar min over the entire DataFrame. To retain the old behavior, use 'frame.min(axis=0)' or just 'frame.min()'\n","  return reduction(axis=axis, out=out, **passkwargs)\n","/usr/local/lib/python3.10/dist-packages/numpy/core/fromnumeric.py:84: FutureWarning: In a future version, DataFrame.max(axis=None) will return a scalar max over the entire DataFrame. To retain the old behavior, use 'frame.max(axis=0)' or just 'frame.max()'\n","  return reduction(axis=axis, out=out, **passkwargs)\n","/usr/local/lib/python3.10/dist-packages/numpy/core/fromnumeric.py:84: FutureWarning: In a future version, DataFrame.min(axis=None) will return a scalar min over the entire DataFrame. To retain the old behavior, use 'frame.min(axis=0)' or just 'frame.min()'\n","  return reduction(axis=axis, out=out, **passkwargs)\n"]}]},{"cell_type":"code","source":["from sklearn.model_selection import train_test_split\n","x_train, x_test, y_train, y_test = train_test_split(x,y,test_size = 0.2,random_state=42)"],"metadata":{"id":"QkzE_ru6zBKF"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from sklearn.linear_model import LogisticRegression\n","lr = LogisticRegression()\n","lr.fit(x_train,y_train)\n","# score predicts and gives the accuracy of model\n","print(\"test accuracy {}\".format(lr.score(x_test,y_test)))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"QZFD7MD3zFrT","executionInfo":{"status":"ok","timestamp":1697448235308,"user_tz":-330,"elapsed":1451,"user":{"displayName":"GARI KAPATI MUNI JAYANTH G","userId":"17943767192181774217"}},"outputId":"40b9a851-c8e0-4cd0-ff6a-f8f675f51287"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["test accuracy 0.8495557749259625\n"]}]},{"cell_type":"code","source":["data1 = pd.read_csv(\"/content/drive/MyDrive/list_attr_celeba.csv\")"],"metadata":{"id":"vx-jDjudzMQA"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["Man=[]\n","Woman=[]\n","for i in data.Male.values:\n","    if i == 1:\n","        Man.append(i)\n","    else:\n","        Woman.append(i)"],"metadata":{"id":"qAhjMOr8zMWR"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["top=[('Man',Man.count(1)),('Woman',Woman.count(-1))]\n","labels, ys = zip(*top)\n","xs = np.arange(len(labels))\n","width = 1\n","plt.bar(xs, ys, width, align='center')\n","plt.xticks(xs, labels) #Replace default x-ticks with xs, then replace xs with labels\n","plt.yticks(ys)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":482},"id":"3SocBUtfzdjr","executionInfo":{"status":"ok","timestamp":1697448324890,"user_tz":-330,"elapsed":498,"user":{"displayName":"GARI KAPATI MUNI JAYANTH G","userId":"17943767192181774217"}},"outputId":"35accdd5-f934-4a1e-c8ec-f7361d0ee3dd"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["([<matplotlib.axis.YTick at 0x781f70b7a770>,\n","  <matplotlib.axis.YTick at 0x781f70b7a110>],\n"," [Text(0, 84434, '84434'), Text(0, 118165, '118165')])"]},"metadata":{},"execution_count":56},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["data1.drop([\"image_id\"],axis=1,inplace = True)"],"metadata":{"id":"hm73S9KazlOt"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["y1 = data.Male.values\n","# we drop Young feature from data set and assign it as x_data1\n","x_data1 = data.drop([\"Male\"],axis=1)\n","# Normalization\n","# Normalization is required if there is big diffirence between your features data\n","# Here there is not big difference but I prefer it to keep program in safe\n","x1 = (x_data1 - np.min(x_data1))/(np.max(x_data1)-np.min(x_data1)).values\n","# Train-Test Split\n","# Here we split the data 70 percent for training and 30 percent for testing\n","# we write random_state=42 because if you rerun code, it splits by using same rule\n","# As a result of using random_state=42, we can get same accuracy.\n","from sklearn.model_selection import train_test_split\n","x_train, x_test, y_train, y_test = train_test_split(x1,y1,test_size = 0.3,random_state=42)\n","# Logistic regression\n","# Here we import and use logistic regression to make and test model.\n","from sklearn.linear_model import LogisticRegression\n","lr = LogisticRegression()\n","lr.fit(x_train,y_train)\n","# score predicts and gives the accuracy of model\n","print(\"test accuracy {}\".format(lr.score(x_test,y_test)))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"93jaiVW2zr3y","executionInfo":{"status":"ok","timestamp":1697448404272,"user_tz":-330,"elapsed":3244,"user":{"displayName":"GARI KAPATI MUNI JAYANTH G","userId":"17943767192181774217"}},"outputId":"ccb6c876-5dfc-47f5-dc59-439245a8e6ab"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/numpy/core/fromnumeric.py:84: FutureWarning: In a future version, DataFrame.min(axis=None) will return a scalar min over the entire DataFrame. To retain the old behavior, use 'frame.min(axis=0)' or just 'frame.min()'\n","  return reduction(axis=axis, out=out, **passkwargs)\n","/usr/local/lib/python3.10/dist-packages/numpy/core/fromnumeric.py:84: FutureWarning: In a future version, DataFrame.max(axis=None) will return a scalar max over the entire DataFrame. To retain the old behavior, use 'frame.max(axis=0)' or just 'frame.max()'\n","  return reduction(axis=axis, out=out, **passkwargs)\n","/usr/local/lib/python3.10/dist-packages/numpy/core/fromnumeric.py:84: FutureWarning: In a future version, DataFrame.min(axis=None) will return a scalar min over the entire DataFrame. To retain the old behavior, use 'frame.min(axis=0)' or just 'frame.min()'\n","  return reduction(axis=axis, out=out, **passkwargs)\n"]},{"output_type":"stream","name":"stdout","text":["test accuracy 0.9325600526488976\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"6BthWe4vzzAY"},"execution_count":null,"outputs":[]}],"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyO5rginn0TKgGEQMKZK9CqT"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}